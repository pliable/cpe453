/*----------------------------------------------------------------------
 * This file is generated by mk_parser.py.
 *----------------------------------------------------------------------*/
#ifndef __CPARSER_TREE_H__
#define __CPARSER_TREE_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

extern cparser_node_t cparser_root;

cparser_result_t cparser_cmd_add__s(cparser_context_t *context);
cparser_result_t cparser_cmd_add__s__i_interval__f_filename(cparser_context_t *context,
    int32_t *interval_ptr,
    char **filename_ptr);
cparser_result_t cparser_cmd_add__s__f_filename__i_interval(cparser_context_t *context,
    char **filename_ptr,
    int32_t *interval_ptr);
cparser_result_t cparser_cmd_add__p_pid(cparser_context_t *context,
    int32_t *pid_ptr);
cparser_result_t cparser_cmd_add__p_pid__i_interval__f_filename(cparser_context_t *context,
    int32_t *pid_ptr,
    int32_t *interval_ptr,
    char **filename_ptr);
cparser_result_t cparser_cmd_add__p_pid__f_filename__i_interval(cparser_context_t *context,
    int32_t *pid_ptr,
    char **filename_ptr,
    int32_t *interval_ptr);
cparser_result_t cparser_cmd_add__e_executable(cparser_context_t *context,
    char **executable_ptr);
cparser_result_t cparser_cmd_add__e_executable__i_interval__f_filename(cparser_context_t *context,
    char **executable_ptr,
    int32_t *interval_ptr,
    char **filename_ptr);
cparser_result_t cparser_cmd_add__e_executable__f_filename__i_interval(cparser_context_t *context,
    char **executable_ptr,
    char **filename_ptr,
    int32_t *interval_ptr);
cparser_result_t cparser_cmd_set_interval_interval(cparser_context_t *context,
    int32_t *interval_ptr);
cparser_result_t cparser_cmd_set_logfile_logFileName(cparser_context_t *context,
    char **logFileName_ptr);
cparser_result_t cparser_cmd_listactive(cparser_context_t *context);
cparser_result_t cparser_cmd_listcompleted(cparser_context_t *context);
cparser_result_t cparser_cmd_remove__s(cparser_context_t *context);
cparser_result_t cparser_cmd_remove__t_threadID(cparser_context_t *context,
    int32_t *threadID_ptr);
cparser_result_t cparser_cmd_kill_processID(cparser_context_t *context,
    int32_t *processID_ptr);
cparser_result_t cparser_cmd_help_filter(cparser_context_t *context,
    char **filter_ptr);
cparser_result_t cparser_cmd_exit(cparser_context_t *context);

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* __CPARSER_TREE_H__ */
